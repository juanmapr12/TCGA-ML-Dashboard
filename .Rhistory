),
box(
width = 8, title = "Resultados", status = "success", solidHeader = TRUE,
plotOutput("graficas")
)
),
)
)
)
)
shiny::runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
runApp('Archivos_R')
elimina_carpetas_GDC()
elimina_carpetas_GDC <- function() {
# Lista todas las carpetas en el WD (no recursivo)
carpetas <- list.dirs(path = ".", recursive = FALSE, full.names = TRUE)
# Expresión regular para carpetas tipo UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
patron_uuid <- "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
# Filtra carpetas que cumplen el patrón
carpetas_a_borrar <- carpetas[grepl(patron_uuid, basename(carpetas))]
# Borra esas carpetas
for(carpeta in carpetas_a_borrar){
# Aseguramos que existe y luego borramos
if(dir.exists(carpeta)){
unlink(carpeta, recursive = TRUE, force = TRUE)
}
}
message("Eliminadas ", length(carpetas_a_borrar), " carpetas")
}
elimina_carpetas_GDC()
setwd("C:/Users/Usuario/OneDrive/Documentos/Archivos_R")
elimina_carpetas_GDC()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(100)
clin_data_split <- initial_split(clinical_df,
prop = c(0.6,0.2),
strata = vital_status)
set.seed(100)
clin_data_split <- initial_split(clinical_df,
prop = 0.8,
strata = vital_status)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
return(list(metrica_accuracy %>% pull(.estimate),
metrica_precision %>% pull(.estimate),
metrica_recall %>% pull(.estimate),
metrica_f1_score %>% pull(.estimate),
metrica_roc_auc %>% pull(.estimate),
valores_curva_roc,
valores_matriz_conf)
)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
runApp()
runApp()
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
runApp()
runApp()
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("klaR")
source("~/Archivos_R/scripts/clasificacion_ML.R")
runApp()
source("~/Archivos_R/scripts/clasificacion_ML.R")
runApp()
source("~/Archivos_R/scripts/clasificacion_ML.R")
runApp()
source("~/Archivos_R/scripts/clasificacion_ML.R")
source("~/Archivos_R/scripts/clasificacion_ML.R")
shiny::runApp()
install.packages("discrim")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
clear()
clear
shiny::runApp("C:\Users\Usuario\OneDrive\Documentos\Archivos_R")
shiny::runApp("C:/Users/Usuario/OneDrive/Documentos/Archivos_R")
kljaskljad
clear
shiny::runApp("C:/Users/Usuario/OneDrive/Documentos/Archivos_R")
shiny::runApp("C:/Users/Usuario/OneDrive/Documentos/Archivos_R")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
